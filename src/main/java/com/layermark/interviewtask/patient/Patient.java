package com.layermark.interviewtask.patient;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.layermark.interviewtask.doctor.Doctor;
import com.layermark.interviewtask.vaccine.Vaccine;

import javax.persistence.*;
import java.time.LocalDate;
import java.time.Period;
import java.util.HashSet;
import java.util.Set;

@Entity(name = "Patient")
@Table(
        name = "patient",
        uniqueConstraints = @UniqueConstraint(name = "patient_email_unique", columnNames = "email")
)
public class Patient {

    // properties
    @Id
    @SequenceGenerator(
            name = "patient_sequence",
            sequenceName = "patient_sequence",
            allocationSize = 1
    )
    @GeneratedValue(
            strategy = GenerationType.SEQUENCE,
            generator = "patient_sequence"
    )
    @Column(
            name = "id",
            updatable = false
    )
    private Long id;
    @Column(
            name = "name",
            nullable = false,
            columnDefinition = "TEXT"
    )
    private String name;
    @Column(
            name = "email",
            nullable = false,
            columnDefinition = "TEXT"
    )
    private String email;
    @Column(
            name = "birthDate",
            nullable = false,
            columnDefinition = "TEXT"
    )
    private LocalDate birthDate;
    @Transient
    private int age;

    @JsonIgnore
    @ManyToMany(mappedBy = "patients")
    private Set<Vaccine> vaccines = new HashSet<>();

    @ManyToOne(cascade = CascadeType.ALL)
    @JoinColumn(
            name = "doctor_id",
            referencedColumnName = "id"
    )
    private Doctor doctor;

    // constructors
    public Patient() {} //default constructor

    public Patient(Long id, String name, String email, LocalDate birthDate) {
        this.id = id;
        this.name = name;
        this.email = email;
        this.birthDate = birthDate;
    } // constructor with all properties

    public Patient(String name, String email, LocalDate birthDate) {
        this.name = name;
        this.email = email;
        this.birthDate = birthDate;
    } // constructor without id since it will be generated by the database

    // accessor methods
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() { return email; }

    public void setEmail(String email) { this.email = email; }

    public LocalDate getBirthDate() { return birthDate; }

    public void setBirthDate(LocalDate birthDate) { this.birthDate = birthDate; }

    public int getAge() { return Period.between(birthDate, LocalDate.now()).getYears(); }

    public void setAge(int age) { this.age = age; }

    public Doctor getDoctor() { return doctor; }

    public void assignVaccine(Vaccine vaccine) {
        if (!this.vaccines.contains(vaccine)) {
            this.vaccines.add(vaccine);
        }
    }

    public void assignDoctor(Doctor doctor) { this.doctor = doctor; }

    // overridden toString method
    @Override
    public String toString() {
        return "Student {" + "id = "+ id + ", name = \"" + name + '"' + ", email = \"" + email + '"' + ", birthdate = \"" + birthDate + '"' + ", age = " + getAge() + "}";
    }
}
